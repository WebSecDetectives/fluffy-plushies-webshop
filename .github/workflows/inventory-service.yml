name: Inventory Service

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/inventory-service.yml'
      - 'InventoryService/**'
  pull_request:
    paths:
      - '.github/workflows/inventory-service.yml'
      - 'InventoryService/**'
  workflow_dispatch:

env:
  DOCKER_REPO: ghcr.io/websecdetectives
  IMAGE_NAME: fluffy-plushies-inventory:latest
  APP_PORT: 8082

permissions:
  contents: read
  security-events: write
  packages: write

jobs:
  build:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    outputs:
      image-ref: ${{ steps.build.outputs.image-ref }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v4
        with:
          context: ./InventoryService
          file: ./InventoryService/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
      - id: build
        run: echo "image-ref=${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}" >> "$GITHUB_OUTPUT"

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Java 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java
      - name: Build Inventory Service
        working-directory: InventoryService
        run: mvn clean package -DskipTests -B
      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v3

  checkov:
    name: Checkov Ansible Scan
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Checkov
        run: pip install checkov
      - name: Run Checkov
        run: checkov --framework ansible -d ansible/

  trivy:
    name: Trivy Container Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull built image
        run: docker pull ${{ needs.build.outputs.image-ref }}
      - uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image
          github-pat: ${{ secrets.GITHUB_TOKEN }}
          image-ref: ${{ needs.build.outputs.image-ref }}

  zap:
    name: OWASP ZAP DAST
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull built image
        run: docker pull ${{ needs.build.outputs.image-ref }}
      - name: Start container
        run: docker run -d --name web -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} ${{ needs.build.outputs.image-ref }}
      - name: Wait for web service
        run: |
          for i in $(seq 1 30); do
            nc -z localhost ${{ env.APP_PORT }} && exit 0
            sleep 1
          done
          echo "Service did not start" >&2
          exit 1
      - name: Start ZAP full scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: "http://host.docker.internal:${{ env.APP_PORT }}"
