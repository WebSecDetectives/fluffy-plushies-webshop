version: '3.8'
services:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    networks:
      - default

  rabbitmq:
    image: docker.io/library/rabbitmq:management
    container_name: rabbitmq
    hostname: rabbitmq
    restart: 'unless-stopped'
    ports: 
      - "5673:5672"
      - "15673:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}

  email-service:
    container_name: email-service
    hostname: email-service
    depends_on:
      - rabbitmq
    build:
      context: ./EmailService
      dockerfile: Dockerfile
    environment:
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      EMAIL_SERVICE_RABBITMQ_QUEUE: ${EMAIL_SERVICE_RABBITMQ_QUEUE}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
        
  identity-mysql:
    image: docker.io/library/mysql:8.4.4
    container_name: identity-mysql
    hostname: identity-mysql
    restart: 'unless-stopped'
    volumes:
      - identity-mysql:/var/lib/mysql
      - ./IdentityService/identity-temp-schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    ports:
      - "33000:3307"
    environment:
        MYSQL_ROOT_PASSWORD: ${IDENTITY_MYSQL_ROOT_PASSWORD}
        MYSQL_DATABASE: fluffy-plushies-identity
        MYSQL_TCP_PORT: ${IDENTITY_MYSQL_TCP_PORT}

  identity-service:
    build:
      context: ./IdentityService
    container_name: identity-service
    hostname: identity-service
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      IDENTITY_MYSQL_USERNAME: ${IDENTITY_MYSQL_USERNAME}
      IDENTITY_MYSQL_PASSWORD: ${IDENTITY_MYSQL_PASSWORD}
      IDENTITY_MYSQL_SCHEMA: ${IDENTITY_MYSQL_SCHEMA}
      IDENTITY_MYSQL_URL: ${IDENTITY_MYSQL_URL}
      IDENTITY_ADMIN_PASSWORD: ${IDENTITY_ADMIN_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - identity-mysql
      - rabbitmq
    entrypoint: >
      sh -c "java -jar app.jar || tail -f /dev/null"

  inventory-mysql:
    image: docker.io/library/mysql:8.4.4
    container_name: inventory-mysql
    hostname: inventory-mysql
    restart: 'unless-stopped'
    volumes:
      - inventory-mysql:/var/lib/mysql
      - ./InventoryService/inventory-temp-schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    ports:
      - "33001:3306"
    environment:
        MYSQL_ROOT_PASSWORD: ${INVENTORY_MYSQL_ROOT_PASSWORD}
        MYSQL_DATABASE: fluffy-plushies-inventory
        MYSQL_TCP_PORT: ${INVENTORY_MYSQL_TCP_PORT}

#  inventory:
#    build:
#      context: ./InventoryService
#    container_name: inventory
#    restart: no
#    ports:
#      - "4567:4567"
#    environment:
#      DB_HOST: inventory-mysql
#      DB_PORT: 3306
#      DB_NAME: inventorydb
#      DB_USER: root
#      DB_PASSWORD: inventory_service
#      RABBITMQ_HOST: rabbitmq
#      RABBITMQ_USER: guest
#      RABBITMQ_PASSWORD: guest
#    depends_on:
#      - inventory-mysql
#      - rabbitmq
#    volumes:
#      - ./InventoryService:/app

#  phpmyadmin:
#    image: docker.io/library/phpmyadmin:5.2.2
#    container_name: phpmyadmin
#    hostname: phpmyadmin
#    ports:
#        - "7081:80"
#    volumes:
#      - ./config.inc.php:/etc/phpmyadmin/config.inc.php:ro

  order-service:
    build:
      context: ./OrderService/OrderGraphQLApi
    container_name: order-service
    hostname: order-service
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      ASPNETCORE_URLS: ${ASPNETCORE_URLS}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      MONGODB_CONNECTION_STRING: ${MONGODB_CONNECTION_STRING}
      MONGODB_DATABASE_NAME: ${MONGODB_DATABASE_NAME}
    depends_on:
      - order-mongodb
      - rabbitmq

  order-mongodb:
    image: docker.io/mongodb/mongodb-community-server:latest
    container_name: order-mongodb
    hostname: order-mongodb
    restart: 'unless-stopped'
    volumes:
      - order-mongodb:/data/db
    ports:
      - "27017:27017"
    environment:
      MONGODB_INITDB_ROOT_USERNAME: root
      MONGODB_INITDB_ROOT_PASSWORD: order_service

volumes:
  rabbitmq_data:
  identity-mysql:
  inventory-mysql:
  order-mongodb: